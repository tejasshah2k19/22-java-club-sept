
--------------------------------------------------------------------		
Thread -> 	
	

1gb ram -> 

200 mb ->
500 mb -> copy paste 
300 mb -> 
100 mb-> wait 


1gb ram -> 
play movie -> 1080 HD -> 1.5gb size 

2gb -> 
			
4 gb -> 

8 gb -> 



process -> inde. self space , no share 	, allocation - free 

thread1  thread2 thread3 
500mb   500mb  500mb

500mb | 500mb | 500mb


movie-> thread -> 500mb ->

---------------------------------------------
1 to 1000 sum  [100 5 second , 50 second ] 
1 to 100 // 5
101 to 200 //5
201 to 300 //5 
.......
901 to 1000 //5 => 50 second 

thread 10 -> 5 second + 2 second -> 7 second 
------------------------------------------


1) extends Thread
2) implements Runnable



two level of lock

1) instance - instance variable 
2) class  - static variable 

how ? 
synchronized 

when?
shared / common resource 
	instance variable - instance level lock - single instance - all thread  
	static variable - class level lock  - all instance - all thread 

1) method 
2) block 

------------------------------------------


t1 -> 1 to 10 
t2 -> 11 to 20
t3 -> 21 to 30 

t1 + t2 + t3 


------------------------------------------
t1 -> running -->
t2 -> runnable --> 


t1 sum 1 to 10  [ 1min ]
t2 sum 11 to 20 [ 1min ] 
t3 sum 21 to 30 [ 1min ]
total -> 1 min -> 3 thread are done 

concurrency 


Queue ->

Executors -> 


what are the ways we have to create thread ? 
2
list out all!
extends Thread 
implements Runnable 

which method we can use to merge a thread?
join()

which method(s) we used to block a thread? 
sleep()
wait()
suspend()


which method(s) we can use to bring back thread from block to 
	active state?

notify()
notifyAll() 
resume() 

which method used to switching thread between running and runnable? 
yield()


which method kills the thread?
stop()

which method we used to create stack for thread?
start()

------------------------------------------------------------------------

speed - resource utilization 


FixedThreadPool() 
ask -> 3- worker -

 --------------------------------------------------
 collection  - topic - api - framework
Collection  - interface 
Collections - class



data -> operation -> store -> add de



amazon -> tv ===request=====> server  ==tv====> db====>select * => tv [50] 


				Collection
List			Queue			Set		|		Map
ArrayList		PriorityQueue		HashSet				HashMap
Vector						TreeSet   			TreeMap


1) duplicate  [ArrayList,Vector,PriorityQueue,data:Map]
2) unique     [HashSet,TreeSet]
3) order      [ArrayList,Vector] 
4) unorder    [HashSet]
5) sorted     [TreeSet]
6) unSorted   [ArrayList,Vector]


amazon -> db -> product -> [ duplicates] 
amazon -> db -> product -> price -> L to Highest
amazon -> db -> product -> price -> duplicate and L to Highest


ArrayList -> Vector 

 
LinkedList => 0 1 2 3 4 5 6 
ArrayList =>  0 1 2 3 4 5 6 
PriorityQueu =>0 1 2 3 4 5 6 7


insertAtBeg
insertAtLast

0
7

Set
	HashSet [unSorted] 
	TreeSet [sorted]
	












